// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/token/token.proto

/*
Package token is a generated protocol buffer package.

It is generated from these files:
	api/token/token.proto

It has these top-level messages:
	DummyReq
	GetNameResp
	GetSymbolResp
*/
package token

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DummyReq struct {
}

func (m *DummyReq) Reset()                    { *m = DummyReq{} }
func (m *DummyReq) String() string            { return proto.CompactTextString(m) }
func (*DummyReq) ProtoMessage()               {}
func (*DummyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetNameResp struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GetNameResp) Reset()                    { *m = GetNameResp{} }
func (m *GetNameResp) String() string            { return proto.CompactTextString(m) }
func (*GetNameResp) ProtoMessage()               {}
func (*GetNameResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetNameResp) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type GetSymbolResp struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GetSymbolResp) Reset()                    { *m = GetSymbolResp{} }
func (m *GetSymbolResp) String() string            { return proto.CompactTextString(m) }
func (*GetSymbolResp) ProtoMessage()               {}
func (*GetSymbolResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetSymbolResp) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*DummyReq)(nil), "token.DummyReq")
	proto.RegisterType((*GetNameResp)(nil), "token.GetNameResp")
	proto.RegisterType((*GetSymbolResp)(nil), "token.GetSymbolResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Token service

type TokenClient interface {
	// Get name of token.
	//
	// Get name of token using gerated key.
	GetName(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*GetNameResp, error)
	// Get symbol of token.
	//
	// Get symbol of token using jwt token.
	GetSymbol(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*GetSymbolResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) GetName(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*GetNameResp, error) {
	out := new(GetNameResp)
	err := grpc.Invoke(ctx, "/token.Token/GetName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) GetSymbol(ctx context.Context, in *DummyReq, opts ...grpc.CallOption) (*GetSymbolResp, error) {
	out := new(GetSymbolResp)
	err := grpc.Invoke(ctx, "/token.Token/GetSymbol", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Token service

type TokenServer interface {
	// Get name of token.
	//
	// Get name of token using gerated key.
	GetName(context.Context, *DummyReq) (*GetNameResp, error)
	// Get symbol of token.
	//
	// Get symbol of token using jwt token.
	GetSymbol(context.Context, *DummyReq) (*GetSymbolResp, error)
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.Token/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).GetName(ctx, req.(*DummyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_GetSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).GetSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.Token/GetSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).GetSymbol(ctx, req.(*DummyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "token.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _Token_GetName_Handler,
		},
		{
			MethodName: "GetSymbol",
			Handler:    _Token_GetSymbol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/token/token.proto",
}

func init() { proto.RegisterFile("api/token/token.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x2c, 0xc8, 0xd4,
	0x2f, 0xc9, 0xcf, 0x4e, 0xcd, 0x83, 0x90, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60,
	0x8e, 0x94, 0x4c, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x48, 0x51, 0x62, 0x5e, 0x5e, 0x7e,
	0x49, 0x62, 0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0x91, 0x12, 0x17, 0x17, 0x87, 0x4b, 0x69, 0x6e,
	0x6e, 0x65, 0x50, 0x6a, 0xa1, 0x92, 0x2a, 0x17, 0xb7, 0x7b, 0x6a, 0x89, 0x5f, 0x62, 0x6e, 0x6a,
	0x50, 0x6a, 0x71, 0x81, 0x90, 0x18, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x89, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0xa7, 0xa4, 0xce, 0xc5, 0xeb, 0x9e, 0x5a, 0x12, 0x5c, 0x99,
	0x9b, 0x94, 0x9f, 0x83, 0x4f, 0xa1, 0xd1, 0x5c, 0x46, 0x2e, 0xd6, 0x10, 0x90, 0x1b, 0x84, 0xdc,
	0xb8, 0xd8, 0xa1, 0x26, 0x0b, 0xf1, 0xeb, 0x41, 0xdc, 0x08, 0xb3, 0x55, 0x4a, 0x08, 0x2a, 0x80,
	0x64, 0xb5, 0x92, 0x58, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0x04, 0x84, 0xf8, 0xf4, 0xcb, 0x0c, 0xa1,
	0x3e, 0xcb, 0x03, 0x69, 0xf6, 0xe1, 0xe2, 0x84, 0x5b, 0x8d, 0x69, 0x92, 0x08, 0xc2, 0x24, 0x84,
	0xeb, 0x94, 0x24, 0xc0, 0x66, 0x09, 0x09, 0x09, 0x20, 0xcc, 0x2a, 0x06, 0xcb, 0x26, 0xb1, 0x81,
	0x83, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x72, 0x8a, 0xd6, 0x40, 0x01, 0x00, 0x00,
}
